# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s_MRddugxpprGjNTA1GwrbupzyMkGUvy

# Intro y Recursos

---
#### *Análisis de sentimientos en redes sociales para turismo accesible de personas con discapacidad*
creamos un programa que extrae datos de Twitter mediante credenciales de autenticación de Twitter Developer y criterios definidos.
Los resultados se almacenan en un archivo CSV después de aplicar un proceso de normalización para eliminar stopwords, espacios,
caracteres especiales y emojis. El código también identifica palabras concurrentes y relaciones, lo que permite generar una nube de
palabras para visualizar la relevancia de términos específicos. Luego de traducir los resultados al español, se realiza el
preentrenamiento del modelo y se determina la polaridad de los datos extraídos (Positivo, Negativo, Neutral) utilizando el módulo VADER de NLTK.

---
#### References & Resources
##### *Twitter*
* Twitter API - https://developer.twitter.com/en
* Tweepy - http://docs.tweepy.org/en/latest/index.html

# Parte 1: Credenciales de la API de Twitter, autenticación e inicio de la clase "cliente"
"""

my_consumer_key = "enC7ohO0r7TYhLOIsFcRhLs6G"
my_consumer_secret = "3NcbQ2W8qnpcgn6veRsnWtZr8sUuXR82pjgR5BYf2b6gWPxOLf"

my_access_token = "1716598343055654912-LuPRpYFYpYCwU83EexABetrwjn7NtK"
my_access_secret = "43aLiBO0RkKnqdGPtHo0zqRYuy1f3U7jL8D7ol4E9SxwS"

my_bearer_token = "AAAAAAAAAAAAAAAAAAAAANusqgEAAAAAZCyTycYGJHPr3ri%2BeE3A5bflHzM%3DKbiz0Iy9KGaooiNAan9XgpoP0XdFfHVbkKCke0A4mEkkZTKZyu"

!pip install git+https://github.com/tweepy/tweepy.git --upgrade

# Import the tweepy package
import tweepy

# Import a variety of other packages that may be useful for working with data.
import pandas as pd
import json
import time

client = tweepy.Client(
    wait_on_rate_limit = True,
    consumer_key = my_consumer_key,
    consumer_secret = my_consumer_secret,
    access_token = my_access_token,
    access_token_secret = my_access_secret,
    bearer_token = my_bearer_token,
)

# Test to make sure the client object exists

client

client.get_user(username ="BarriosJuan20")

"""# Parte 2: Primeros pasos con Tweepy y la búsqueda de usuarios"""

# Las cuentas de usuario individuales son un buen punto de partida para aprender a
# recuperar y trabajar con datos de la API de Twitter. El siguiente ejemplo utiliza
# nuestro objeto cliente y la función get_user(...) para buscar un objeto específico

user_single = client.get_user(
    username ="barrosjss",
)

user_single

# Se puede acceder a los datos como componente del objeto user_single

user_single.data

user_single.data.name

print( user_single.data.id )
print( user_single.data.name )
print( user_single.data.username )
print( user_single.data.created_at )

# Esta información está estructurada como un diccionario y puede tratarse como un JSON

user_single.data.data

# Sin embargo, lo que supongo que es más útil para la mayoría de los investigadores es utilizar Pandas.
# para convertir los datos a un Pandas DataFrame: https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#dataframe

pd.json_normalize(user_single.data.data, sep="_" )

# Muchas funciones en la API de Twitter/Tweepy permiten enviar múltiples
# solicitudes a la vez. En este caso, podemos solicitar detalles de la cuenta en múltiples
# cuentas de Twitter conocidas.

users_group = client.get_users(
    usernames = ["standupmaths","FryRsquared","3blue1brown","MouldS"],
    user_fields = ["created_at", "description","public_metrics","verified"]
)

users_group

users_group.data

# Crear marco de datos vacío
data_users = pd.DataFrame()

# Iterar a través de users_group y agregar datos al marco de datos data_users
for i in users_group.data:
  temp_data = pd.json_normalize( i.data ,  sep = "_")
  data_users = data_users.append( temp_data , ignore_index=True )

data_users

"""# Parte 3: Filtrado de twits con palabras claves"""

# client = tweepy.Client(
#     wait_on_rate_limit = True,
#     consumer_key = my_consumer_key,
#     consumer_secret = my_consumer_secret,
#     access_token = my_access_token,
#     access_token_secret = my_access_secret,
#     bearer_token = my_bearer_token,
# )

# Post Tweet
#message = " MESSAGE "
#client.create_tweet(text=message)
#print("Tweeted!")


#client.search(q="hola", lang="es", tweet_mode="extended", count=10)

auth = tweepy.OAuthHandler(my_consumer_key, my_consumer_secret)
auth.set_access_token(my_access_token, my_access_secret)
api = tweepy.API(auth, wait_on_rate_limit=True)

# Defina los términos de busqueda
search_words = "Shakira"

# Extraiga los tweets
tweets = tweepy.Cursor(api.search_tweets,
                   q=search_words,
                   lang="es",
                   tweet_mode="extended"
                  ).items(10)
#para el resto de parámetros revisar: https://docs.tweepy.org/en/stable/client.html

tweets_list = [[tweet.full_text, tweet.user.location] for tweet in tweets]
tweets_list

https://www.mincit.gov.co/CMSPages/GetFile.aspx?guid=f29fa89a-ed14-4c7f-b803-176b86074fbc

